name: Nightly SQL Release

on:
  workflow_dispatch:  # ‚õî No branches here
  schedule:
    - cron: '0 6 * * *'  # 2AM EST (6AM UTC)

permissions:
  contents: write

jobs:
  nightly-sql-release:
    if: github.ref == 'refs/heads/cicd-sql-release'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout cicd-sql-release branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: cicd-sql-release

      - name: Set up GitHub CLI
        run: |
          sudo apt update
          sudo apt install gh -y

      - name: Fetch all branches
        run: |
          git fetch origin main
          git fetch origin cicd-sql-release
  
      - name: Get list of changed SQL files between branches
        id: get_diff_files
        run: |
          BASE_COMMIT=$(git merge-base origin/main origin/cicd-sql-release)
          echo "Using merge base: $BASE_COMMIT"
              
          # Get changed SQL files (ignoring formatting-only changes)
          git diff -w --ignore-blank-lines --name-only "$BASE_COMMIT..origin/cicd-sql-release" \
            | grep '\.sql$' | sort > sorted_sql.txt
        
          cat sorted_sql.txt
        
      - name: Debug detected files
        run: |
          echo "üßæ SQL files detected:"
          if [ -f sorted_sql.txt ]; then
            cat sorted_sql.txt
          else
            echo "‚ùå No sorted_sql.txt found"
          fi


      - name: Show line-by-line changes for SQL files (ignoring whitespace)
        run: |
          echo "üìÑ Showing detailed line-by-line changes for modified SQL files..."
          
          BASE_COMMIT=origin/main
          echo "üìå Using BASE_COMMIT: $BASE_COMMIT"
          
          if [ -f sorted_sql.txt ]; then
            while read file; do
              echo "üîç Diff for: $file"
              echo "----------------------------------------"
          
              if git ls-tree -r "$BASE_COMMIT" --name-only | grep -Fqx "$file"; then
                git diff -w -B "$BASE_COMMIT" -- "$file" || echo "‚ö†Ô∏è Diff failed"
              else
                echo "‚ö†Ô∏è Skipped: File doesn't exist in base branch (new file)"
              fi
          
              echo ""
            done < sorted_sql.txt
          else
            echo "‚ùå sorted_sql.txt not found"
          fi
          
      - name: Normalize SQL keywords (CREATE, VALUES, etc.)
        run: |
          echo "üîß Normalizing SQL keyword cases in modified files..."
          
          if [ -f sorted_sql.txt ]; then
            while read file; do
              if [ -f "$file" ]; then
                echo "‚öôÔ∏è Normalizing $file"
                sed -i \
                  -e 's/\bcreate or replace\b/CREATE OR REPLACE/gI' \
                  -e 's/\bcreate table\b/CREATE TABLE/gI' \
                  -e 's/\bcreate view\b/CREATE VIEW/gI' \
                  -e 's/\bcreate procedure\b/CREATE PROCEDURE/gI' \
                  -e 's/\bdrop table\b/DROP TABLE/gI' \
                  -e 's/\bdrop view\b/DROP VIEW/gI' \
                  -e 's/\bdrop procedure\b/DROP PROCEDURE/gI' \
                  -e 's/\binsert into\b/INSERT INTO/gI' \
                  -e 's/\bvalues\b/VALUES/gI' \
                  -e 's/\bselect\b/SELECT/gI' \
                  -e 's/\bfrom\b/FROM/gI' \
                  -e 's/\bwhere\b/WHERE/gI' \
                  -e 's/\bjoin\b/JOIN/gI' \
                  -e 's/\bon\b/ON/gI' \
                  -e 's/\bgroup by\b/GROUP BY/gI' \
                  -e 's/\border by\b/ORDER BY/gI' \
                  -e 's/\bprimary key\b/PRIMARY KEY/gI' \
                  -e 's/\bforeign key\b/FOREIGN KEY/gI' \
                  -e 's/\bnot null\b/NOT NULL/gI' \
                  -e 's/\bnumber\b/NUMBER/gI' \
                  -e 's/\bvarchar\b/VARCHAR/gI' \
                  -e 's/\bdate\b/DATE/gI' \
                  "$file"
              fi
            done < sorted_sql.txt
          else
            echo "‚ùå sorted_sql.txt not found. Skipping normalization."
          fi
    

      - name: Create release notes and attach sorted_sql.txt
        run: |
          echo "üìù Modified SQL Files:" > release_notes.md
          if [ -s sorted_sql.txt ]; then
            while read file; do
              echo "- $file" >> release_notes.md
            done < sorted_sql.txt
          else
            echo "- No SQL files found" >> release_notes.md
          fi
        

      - name: Generate unique nightly tag
        id: generate_tag
        run: |
          BASE_TAG="nightly-$(date +%Y-%m-%d)"
          i=1
          while gh release view "${BASE_TAG}-$(printf "%03d" $i)" &>/dev/null; do
            i=$((i+1))
          done
          TAG_NAME="${BASE_TAG}-$(printf "%03d" $i)"
          echo "‚úÖ Using tag: $TAG_NAME"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.HUB_TOKEN }}

      - name: Create new nightly release (not draft, marked as latest)
        run: |
          gh release create "${{ steps.generate_tag.outputs.tag_name }}" \
            --title "Nightly SQL Release - $(date '+%Y-%m-%d %H:%M:%S')" \
            --notes-file release_notes.md \
            --target cicd-sql-release \
            --latest \
            sorted_sql.txt release_notes.md   # ‚úÖ Attach files
        env:
          GH_TOKEN: ${{ secrets.HUB_TOKEN }}
