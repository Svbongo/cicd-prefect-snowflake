name: Nightly SQL Release

on:
  workflow_dispatch:
  schedule:
    - cron: '0 6 * * *'  # 2AM EST / 6AM UTC

permissions:
  contents: write

jobs:
  nightly-sql-release:
    if: github.ref == 'refs/heads/cicd-sql-release'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout cicd-sql-release branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: cicd-sql-release

      - name: Set up GitHub CLI
        run: |
          sudo apt update
          sudo apt install gh -y

      - name: Fetch main branch
        run: git fetch origin main

      - name: Get all changed SQL files (raw diff)
        id: get_diff
        run: |
          BASE_COMMIT=$(git merge-base origin/main origin/cicd-sql-release)
          echo "Using merge base: $BASE_COMMIT"

          git diff --name-only $BASE_COMMIT..origin/cicd-sql-release | grep '\.sql$' | sort > all_sql.txt || true
          echo "🧾 All SQL file changes:"
          cat all_sql.txt || echo "❌ None found"

      - name: Filter SQL files with real changes (ignoring whitespace)
        id: filter_changes
        run: |
          BASE_COMMIT=$(git merge-base origin/main origin/cicd-sql-release)
          > sorted_sql.txt
          > sql_diffs.log

          while read -r file; do
            echo "🔍 Checking diff for: $file"
            if git diff -w -B --quiet "$BASE_COMMIT" -- "$file"; then
              echo "⛔ Skipped (whitespace only): $file"
            else
              echo "$file" >> sorted_sql.txt
              echo "✅ Real change in: $file"
              echo "🔍 Diff for: $file" >> sql_diffs.log
              echo "----------------------------------------" >> sql_diffs.log
              git diff -w -B "$BASE_COMMIT" -- "$file" >> sql_diffs.log
              echo "" >> sql_diffs.log
            fi
          done < all_sql.txt

          echo "✅ Final filtered files:"
          cat sorted_sql.txt || echo "❌ No real changes"

      - name: Normalize SQL keyword casing
        run: |
          echo "🔧 Normalizing SQL keyword cases..."
          if [ -s sorted_sql.txt ]; then
            while read -r file; do
              if [ -f "$file" ]; then
                echo "⚙️ Normalizing $file"
                sed -i \
                  -e 's/\bcreate or replace\b/CREATE OR REPLACE/gI' \
                  -e 's/\bcreate table\b/CREATE TABLE/gI' \
                  -e 's/\bcreate view\b/CREATE VIEW/gI' \
                  -e 's/\bcreate procedure\b/CREATE PROCEDURE/gI' \
                  -e 's/\bdrop table\b/DROP TABLE/gI' \
                  -e 's/\bdrop view\b/DROP VIEW/gI' \
                  -e 's/\bdrop procedure\b/DROP PROCEDURE/gI' \
                  -e 's/\binsert into\b/INSERT INTO/gI' \
                  -e 's/\bvalues\b/VALUES/gI' \
                  -e 's/\bselect\b/SELECT/gI' \
                  -e 's/\bfrom\b/FROM/gI' \
                  -e 's/\bwhere\b/WHERE/gI' \
                  -e 's/\bjoin\b/JOIN/gI' \
                  -e 's/\bon\b/ON/gI' \
                  -e 's/\bgroup by\b/GROUP BY/gI' \
                  -e 's/\border by\b/ORDER BY/gI' \
                  -e 's/\bprimary key\b/PRIMARY KEY/gI' \
                  -e 's/\bforeign key\b/FOREIGN KEY/gI' \
                  -e 's/\bnot null\b/NOT NULL/gI' \
                  -e 's/\bnumber\b/NUMBER/gI' \
                  -e 's/\bvarchar\b/VARCHAR/gI' \
                  -e 's/\bdate\b/DATE/gI' \
                  "$file"
              fi
            done < sorted_sql.txt
          else
            echo "❌ No filtered SQL files found."
          fi

      - name: Create release notes
        run: |
          echo "📝 Modified SQL Files:" > release_notes.md
          if [ -s sorted_sql.txt ]; then
            while read -r file; do
              echo "- $file" >> release_notes.md
            done < sorted_sql.txt
          else
            echo "- No SQL files with real changes" >> release_notes.md
          fi

      - name: Generate unique nightly tag
        id: generate_tag
        run: |
          BASE_TAG="nightly-$(date +%Y-%m-%d)"
          i=1
          while gh release view "${BASE_TAG}-$(printf "%03d" $i)" &>/dev/null; do
            i=$((i+1))
          done
          TAG_NAME="${BASE_TAG}-$(printf "%03d" $i)"
          echo "✅ Using tag: $TAG_NAME"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.HUB_TOKEN }}

      - name: Create GitHub Release
        run: |
          gh release create "${{ steps.generate_tag.outputs.tag_name }}" \
            --title "Nightly SQL Release - $(date '+%Y-%m-%d %H:%M:%S')" \
            --notes-file release_notes.md \
            --target cicd-sql-release \
            --latest \
            sorted_sql.txt release_notes.md sql_diffs.log
        env:
          GH_TOKEN: ${{ secrets.HUB_TOKEN }}
