name: Nightly SQL Draft Release

on:
  schedule:
    - cron: '0 6 * * *'  # 2 AM EST
  workflow_dispatch:

permissions:
  contents: write

jobs:
  create-draft-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 👈 ensures full tag history

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

      - name: Detect new/modified .sql files
        id: get_sqls
        run: |
          echo "🧠 Detecting new/modified .sql files..."

          LAST_TAG=$(git tag --sort=-creatordate | grep "^LastCommit-" | head -n 1)

          if [ -z "$LAST_TAG" ]; then
            echo "⚠️ No LastCommit tag found. Using last 10 commits."
            git diff --name-status $(git rev-list --max-count=10 HEAD) | grep '\.sql$' || true > raw_sql_changes.txt
          else
            echo "📦 Latest tag: $LAST_TAG"
            git diff --name-status "$LAST_TAG"..HEAD | grep '\.sql$' || true > raw_sql_changes.txt
          fi

          awk '$1 == "A" || $1 == "M" || $1 == "R100" { print $2 }' raw_sql_changes.txt > sql_files.txt

          echo "sql_files<<EOF" >> $GITHUB_OUTPUT
          cat sql_files.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Debug detected SQL files
        run: |
          echo "✅ Final .sql files found:"
          cat sql_files.txt || echo "❌ No SQL files detected."

      - name: Create release notes file
        run: |
          echo "Modified SQL Files:" > release_notes.md
          cat sql_files.txt | while read file; do
            echo "- $file" >> release_notes.md
          done

      - name: Create GitHub Release via API (no new tag)
        env:
          GH_TOKEN: ${{ secrets.HUB_TOKEN }}
        run: |
          TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
          TAG_NAME="LastCommit-nightly-${TIMESTAMP//[: ]/-}"
          ESCAPED_BODY=$(cat release_notes.md | sed 's/"/\\"/g')
        
          cat <<EOF > payload.json
          {
          "tag_name": "$TAG_NAME",
          "name": "Nightly SQL Release - $TIMESTAMP",
          "body": "$ESCAPED_BODY",
          "draft": true,
          "prerelease": false,
          "target_commitish": "${{ github.ref_name }}"
          }
          EOF
        
          curl -X POST \
            -H "Authorization: token $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d @payload.json
        